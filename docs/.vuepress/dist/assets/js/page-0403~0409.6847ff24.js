(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{749:function(t,r,a){"use strict";a.r(r);var e=a(2),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0403-0409"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0403-0409"}},[t._v("#")]),t._v(" 0403 ~ 0409")]),t._v(" "),a("h2",{attrs:{id:"_0404-dispatcher-servlet-디스패처-서블릿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0404-dispatcher-servlet-디스패처-서블릿"}},[t._v("#")]),t._v(" 0404 - Dispatcher-Servlet(디스패처 서블릿)")]),t._v(" "),a("h3",{attrs:{id:"dispatcher-servlet-개념"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcher-servlet-개념"}},[t._v("#")]),t._v(" Dispatcher-Servlet 개념")]),t._v(" "),a("h4",{attrs:{id:"개념"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#개념"}},[t._v("#")]),t._v(" 개념")]),t._v(" "),a("p",[t._v('디스패처 서블릿의 dispatch는 "보내다"라는 뜻을 가지고 있다. 그리고 이러한 단어를 포함하는 디스패처 서블릿은 HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아 적합한 컨트롤러에 위임해주는 프론트 컨트롤러(Front Controller)라고 정의할 수 있다.'),a("br"),t._v("\n이것을 보다 자세히 설명하자면, 클라이언트로부터 어떠한 요청이 오면 Tomcat(톰캣)과 같은 서블릿 컨테이너가 요청을 받게 된다. 그리고 이 모든 요청을 프론트 컨트롤러인 디스패처 서블릿이 가장 먼저 받게 된다. 그러면 디스패처 서블릿은 공통적인 작업을 먼저 처리한 후에 해당 요청을 처리해야 하는 컨트롤러를 찾아서 작업을 위임한다."),a("br"),t._v("\n여기서 Front Controller(프론트 컨트롤러)라는 용어가 사용되는데, Front Controller는 주로 서블릿 컨테이너의 제일 앞에서 서버로 들어오는 클라이언트의 모든 요청을 받아서 처리해주는 컨트롤러로써, MVC 구조에서 함께 사용되는 디자인 패턴이다.")]),t._v(" "),a("h4",{attrs:{id:"장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#장점"}},[t._v("#")]),t._v(" 장점")]),t._v(" "),a("p",[t._v("spring MVC는 DispatcherServlet이 등장함에 따라 web.xml의 역할을 상당히 축소시켜 주었다. 과거에는 모든 서블릿을 URL 매핑을 위해 web.xml에 모두 등록해주어야 했지만, dispatcher-servlet이 해당 어플리케이션으로 들어오는 모든 요청을 핸들링해주고 공통작업을 처리하면서 상당히 편리하게 이용할 수 있게 되었다. 우리는 컨트롤러를 구현해두기만 하면 디스패처 서블릿이 알아서 적합한 컨트롤러로 위임해주는 구조가 되었다.")]),t._v(" "),a("h3",{attrs:{id:"dispatcher-servelt-동작-과정"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcher-servelt-동작-과정"}},[t._v("#")]),t._v(" Dispatcher-Servelt 동작 과정")]),t._v(" "),a("h4",{attrs:{id:"동작방식"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#동작방식"}},[t._v("#")]),t._v(" 동작방식")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbImFbg%2FbtrGzZMTuu2%2FCkY4MiKvl5ivUJPoc5I3zk%2Fimg.png",alt:"image"}})]),t._v(" "),a("ol",[a("li",[t._v("클라이언트의 요청을 디스패처 서블릿이 받음")]),t._v(" "),a("li",[t._v("요청 정보를 통해 요청을 위임할 컨트롤러를 찾음")]),t._v(" "),a("li",[t._v("요청을 컨트롤러로 위임할 핸들러 어댑터를 찾아서 전달")]),t._v(" "),a("li",[t._v("핸들러 어댑터가 컨트롤러로 요청을 위임함")]),t._v(" "),a("li",[t._v("비지니스 로직을 처리함")]),t._v(" "),a("li",[t._v("컨트롤러가 반환값을 반환함")]),t._v(" "),a("li",[t._v("핸들러 어댑터가 반환값을 처리함")]),t._v(" "),a("li",[t._v("서버의 응답을 클라이언트로 반환함")])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"_0405"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0405"}},[t._v("#")]),t._v(" 0405 -")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);r.default=s.exports}}]);
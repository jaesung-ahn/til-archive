(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{740:function(t,e,a){"use strict";a.r(e);var r=a(2),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0102-0108"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0102-0108"}},[t._v("#")]),t._v(" 0102 ~ 0108")]),t._v(" "),a("h2",{attrs:{id:"_0103-preparedstatement-사용-이유"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0103-preparedstatement-사용-이유"}},[t._v("#")]),t._v(" 0103 - Preparedstatement 사용 이유")]),t._v(" "),a("h4",{attrs:{id:"성능-측면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#성능-측면"}},[t._v("#")]),t._v(" "),a("strong",[t._v("[ 성능 측면 ]")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://velog.velcdn.com/images%2Fjsj3282%2Fpost%2F8587157c-7cf4-47a5-acce-c8b9fab630b5%2FwiRZS.png",alt:"image"}})]),t._v(" "),a("p",[t._v("SQL 서버 엔진이 쿼리를 수행할 때 마다 다음의 과정을 거친다.")]),t._v(" "),a("ol",[a("li",[t._v("구문 분석 및 정규화 단계 : 쿼리 문법이 제대로 작성되었는지 확인하고 해당 테이블과 컬럼이 데이터베이스에 존재하는지 확인한다.")]),t._v(" "),a("li",[t._v("컴파일 단계 : 쿼리를 컴파일한다.")]),t._v(" "),a("li",[t._v("쿼리 최적화 계획 : 쿼리를 실행할 수 있는 방법의 수와 쿼리를 실행하는 각 방법의 비용을 알아내 최적의 계획을 선택한다.")]),t._v(" "),a("li",[t._v("캐시 : 쿼리 최적화 계획에서 선택된 계획은 캐시에 저장되므로 동일한 쿼리가 들어올때마다 1, 2, 3 단계를 다시 실행하지 않고 다음에 동일한 쿼리가 들어오면 Cache를 찾아 실행한다.")]),t._v(" "),a("li",[t._v("실행 단계 : 쿼리가 실행되고 데이터가 ResultSet 객체로 사용자에게 반환된다.")])]),t._v(" "),a("p",[t._v("Statement는 쿼리를 실행할 때마다 1~5단계를 수행한다.")]),t._v(" "),a("p",[t._v("PreparedStatement는 완전한 SQL 쿼리가 아니고 SQL 쿼리의 틀을 미리 생성해 놓고 물음표를 대체할 값을 나중에 지정한다. 따라서 PreparedStatement가 처음 실행될 때 위의 1~3단계를 수행 후 사전 컴파일 되어 캐시에 저장된다. 이후에 "),a("code",[t._v("Placeholder Replacement")]),t._v("라는 추가 단계가 있으며 런타임시에 사용자가 입력한 데이터로 set메서드를 사용해 "),a("code",[t._v("?")]),t._v("를 대체한다.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://velog.velcdn.com/images%2Fjsj3282%2Fpost%2F3744ceb3-6cd8-4646-9566-15de6144b2d2%2FkWnd1.png",alt:"image"}})]),t._v(" "),a("p",[a("code",[t._v("?")]),t._v("가 사용자가 입력한 데이터로 바뀐 후에는 최종 쿼리가 다시 구문 분석하거나 컴파일하지 않는다.")]),t._v(" "),a("h4",{attrs:{id:"보안-측면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#보안-측면"}},[t._v("#")]),t._v(" "),a("strong",[t._v("[ 보안 측면 ]")])]),t._v(" "),a("p",[t._v("PreparedStatement는 SQL Injection 공격을 방지하기 때문에 보안 측면에서도 좋다.")]),t._v(" "),a("p",[t._v("PreparedStatement에서는 쿼리 실행 단계에서 알 수 있듯이, 쿼리가 컴파일 되어 캐시된 이후에 Placeholder Replacement단계에서 사용자의 데이터로 대체되기 때문에 이미 컴파일된 최종 쿼리는 다시 컴파일 과정을 거치지 않는다. 따라서 사용자의 데이터는 항상 간단한 문자열이여야 하며 쿼리의 원래 논리를 수정할 수 없다. 따라서 PreparedStatement를 사용한 쿼리는 SQL 주입 공격에 대한 영향을 받지 않는다.")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"_0104"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0104"}},[t._v("#")]),t._v(" 0104 -")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);e.default=s.exports}}]);